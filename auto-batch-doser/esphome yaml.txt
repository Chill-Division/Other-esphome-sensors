esphome:
  name: gr1-abd
  friendly_name: gr1-abd
  # This automation runs once when the ESP boots up
  # It sets the initial state of the direction text sensors
  # based on the initial state of the direction switches.
  # Higher priority ensures it runs early.
  on_boot:
    priority: 600  # Default priority is 0. Higher runs earlier.
    then:
      - lambda: |-
          // Motor 1
          if (id(motor_1_direction).state) {
            id(motor_1_direction_text).publish_state("Forward");
          } else {
            id(motor_1_direction_text).publish_state("Reverse");
          }
          // Motor 2
          if (id(motor_2_direction).state) {
            id(motor_2_direction_text).publish_state("Forward");
          } else {
            id(motor_2_direction_text).publish_state("Reverse");
          }
          // Motor 3
          if (id(motor_3_direction).state) {
            id(motor_3_direction_text).publish_state("Forward");
          } else {
            id(motor_3_direction_text).publish_state("Reverse");
          }
          // Motor 4
          if (id(motor_4_direction).state) {
            id(motor_4_direction_text).publish_state("Forward");
          } else {
            id(motor_4_direction_text).publish_state("Reverse");
          }

esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "********************"

ota:
  - platform: esphome
    password: "*****************"

ethernet:
  type: IP101
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO5

web_server:
  port: 80

uart:
  tx_pin: GPIO16     #16 for PoESP32, 26 for AtomLite
  rx_pin: GPIO17     #17 for PoESP32, 32 for AtomLite
  baud_rate: 115200
  id: uart_bus

switch:
  - platform: template
    name: "Motor 1 Power"
    optimistic: true
    id: motor_1_power
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 1 ON\n"
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 1 OFF\n"

  - platform: template
    name: "Motor 1 Direction"
    id: motor_1_direction
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON # Try to restore, revert to ON (Forward) otherwise
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 1 FWD\n"
      - lambda: |-
          id(motor_1_direction_text).publish_state("Forward");
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 1 REV\n"
      - lambda: |-
          id(motor_1_direction_text).publish_state("Reverse");

  - platform: template
    name: "Motor 2 Power"
    optimistic: true
    id: motor_2_power
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 2 ON\n"
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 2 OFF\n"

  - platform: template
    name: "Motor 2 Direction"
    id: motor_2_direction
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON # Try to restore, revert to ON (Forward) otherwise
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 2 FWD\n"
      - lambda: |-
          id(motor_2_direction_text).publish_state("Forward");
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 2 REV\n"
      - lambda: |-
          id(motor_2_direction_text).publish_state("Reverse");

  - platform: template
    name: "Motor 3 Power"
    optimistic: true
    id: motor_3_power
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 3 ON\n"
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 3 OFF\n"

  - platform: template
    name: "Motor 3 Direction"
    id: motor_3_direction
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON # Try to restore, revert to ON (Forward) otherwise
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 3 FWD\n"
      - lambda: |-
          id(motor_3_direction_text).publish_state("Forward");
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 3 REV\n"
      - lambda: |-
          id(motor_3_direction_text).publish_state("Reverse");

  - platform: template
    name: "Motor 4 Power"
    optimistic: true
    id: motor_4_power
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 4 ON\n"
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 4 OFF\n"
    on_turn_on: 
      then:
        - logger.log: "It's been turned on, waiting 60s"
        - delay: 60s
        - logger.log: "It's been turned on for 60s, turning off for measurements test"
        - switch.turn_off: motor_4_power
        - logger.log: "Done"

  - platform: template
    name: "Motor 4 Direction"
    id: motor_4_direction
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON # Try to restore, revert to ON (Forward) otherwise
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "Motor 4 FWD\n"
      - lambda: |-
          id(motor_4_direction_text).publish_state("Forward");
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "Motor 4 REV\n"
      - lambda: |-
          id(motor_4_direction_text).publish_state("Reverse");

# Add text sensors
text_sensor:
  - platform: template
    name: "Motor 1 Direction"
    id: motor_1_direction_text
    lambda: |-
      if(id(motor_1_direction).state){
        return {"Forward"};
      }else{
        return {"Reverse"};
      }
    update_interval: 60s  # Only update every minute to avoid constant updates

  - platform: template
    name: "Motor 2 Direction"
    id: motor_2_direction_text
    lambda: |-
      if(id(motor_2_direction).state){
        return {"Forward"};
      }else{
        return {"Reverse"};
      }
    update_interval: 60s  # Only update every minute to avoid constant updates

  - platform: template
    name: "Motor 3 Direction"
    id: motor_3_direction_text
    lambda: |-
      if(id(motor_3_direction).state){
        return {"Forward"};
      }else{
        return {"Reverse"};
      }
    update_interval: 60s  # Only update every minute to avoid constant updates

  - platform: template
    name: "Motor 4 Direction"
    id: motor_4_direction_text
    lambda: |-
      if(id(motor_4_direction).state){
        return {"Forward"};
      }else{
        return {"Reverse"};
      }
    update_interval: 60s  # Only update every minute to avoid constant updates

  - platform: template
    name: "Firmware Version"
    id: fw_version_sensor
    update_interval: 60s
    lambda: |-
      static std::string buffer;
      while (id(uart_bus).available()) {
        uint8_t byte;
        id(uart_bus).read_byte(&byte);
        char c = static_cast<char>(byte);

        if (c == '\n' || c == '\r') {
          if (buffer.rfind("FW:", 0) == 0) {
            std::string version = buffer.substr(3);
            buffer.clear();
            return version;
          }
          buffer.clear();
        } else {
          buffer += c;
        }
      }
      return {};
